import telebot
import json
from datetime import datetime

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot('YOUR_TELEGRAM_BOT_TOKEN')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö
finances = {
    'income': [],  # –°–ø–∏—Å–æ–∫ –¥–æ—Ö–æ–¥–æ–≤: (—Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞)
    'expenses': []  # –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤: (—Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç–∞)
}

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'finances.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


def load_data():
    global finances
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            finances = json.load(f)
    except FileNotFoundError:
        save_data()  # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª


def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(finances, f, ensure_ascii=False, indent=2)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è


def parse_amount_and_desc(text):
    parts = text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ 2 —á–∞—Å—Ç–∏
    try:
        amount = float(parts[0])  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ‚Äî —á–∏—Å–ª–æ
        description = parts[1]
        return amount, description
    except ValueError:
        try:
            amount = float(parts[1])  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ‚Äî —á–∏—Å–ª–æ
            description = parts[0]
            return amount, description
        except (ValueError, IndexError):
            return None, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π


@bot.message_handler(content_types=['text'])
def handle_message(message):
    text = message.text.strip()
    command_parts = text.split(maxsplit=1)
    command = command_parts[0].lower()  # –ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî –∫–æ–º–∞–Ω–¥–∞

    # –ö–æ–º–∞–Ω–¥–∞ "start"
    if command == 'start':
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.\n"
                              "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                              "–¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥\n"
                              "—Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
                              "–∏—Ç–æ–≥ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–∏\n"
                              "—Å–±—Ä–æ—Å ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n"
                              "–ü–æ—Ä—è–¥–æ–∫ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ –≤–∞–∂–µ–Ω!")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–¥–æ—Ö–æ–¥"
    if command == '–¥–æ—Ö–æ–¥':
        if len(command_parts) < 2:
            bot.reply_to(
                message, "–§–æ—Ä–º–∞—Ç: –¥–æ—Ö–æ–¥ <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n–ü—Ä–∏–º–µ—Ä: –¥–æ—Ö–æ–¥ 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞")
            return

        amount, description = parse_amount_and_desc(command_parts[1])
        if amount is None:
            bot.reply_to(
                message, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∏–º–µ—Ä: –¥–æ—Ö–æ–¥ 5000 –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏–ª–∏ –¥–æ—Ö–æ–¥ –ó–∞—Ä–ø–ª–∞—Ç–∞ 5000")
            return

        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        finances['income'].append((amount, description, date))
        save_data()
        bot.reply_to(message, f"–î–æ—Ö–æ–¥ {amount} ({description}) –¥–æ–±–∞–≤–ª–µ–Ω!")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "—Ä–∞—Å—Ö–æ–¥"
    if command == '—Ä–∞—Å—Ö–æ–¥':
        if len(command_parts) < 2:
            bot.reply_to(
                message, "–§–æ—Ä–º–∞—Ç: —Ä–∞—Å—Ö–æ–¥ <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>\n–ü—Ä–∏–º–µ—Ä: —Ä–∞—Å—Ö–æ–¥ 1000 –ï–¥–∞")
            return

        amount, description = parse_amount_and_desc(command_parts[1])
        if amount is None:
            bot.reply_to(
                message, "–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∏–º–µ—Ä: —Ä–∞—Å—Ö–æ–¥ 1000 –ï–¥–∞ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ –ï–¥–∞ 1000")
            return

        date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        finances['expenses'].append((amount, description, date))
        save_data()
        bot.reply_to(message, f"–†–∞—Å—Ö–æ–¥ {amount} ({description}) –¥–æ–±–∞–≤–ª–µ–Ω!")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–∏—Ç–æ–≥"
    if command == '–∏—Ç–æ–≥':
        total_income = sum(item[0] for item in finances['income'])
        total_expenses = sum(item[0] for item in finances['expenses'])
        balance = total_income - total_expenses

        summary_text = (
            f"üìä –ò—Ç–æ–≥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤:\n"
            f"–î–æ—Ö–æ–¥—ã: {total_income:.2f}\n"
            f"–†–∞—Å—Ö–æ–¥—ã: {total_expenses:.2f}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance:.2f}"
        )

        if finances['income']:
            summary_text += "\n\nüìà –î–æ—Ö–æ–¥—ã:"
            for amount, desc, date in finances['income']:
                summary_text += f"\n- {amount:.2f} ({desc}) ‚Äî {date}"

        if finances['expenses']:
            summary_text += "\n\nüìâ –†–∞—Å—Ö–æ–¥—ã:"
            for amount, desc, date in finances['expenses']:
                summary_text += f"\n- {amount:.2f} ({desc}) ‚Äî {date}"

        bot.reply_to(
            message, summary_text if finances['income'] or finances['expenses'] else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "—Å–±—Ä–æ—Å"
    if command == '—Å–±—Ä–æ—Å':
        global finances
        finances = {'income': [], 'expenses': []}  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª
        bot.reply_to(message, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    bot.reply_to(
        message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ 'start' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_data()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
